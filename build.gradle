plugins {
    id 'org.jetbrains.kotlin.jvm' version '1.3.61'
    id 'maven-publish'
    id 'signing'
}

group 'com.spotify.tracing'
version = System.getenv('CIRCLE_TAG') ?: System.getenv('DOCKER_TAG') ?: '0.0.1-SNAPSHOT'

repositories {
    mavenLocal()
    mavenCentral()
}

dependencies {
    implementation 'org.jetbrains.kotlin:kotlin-stdlib-jdk8'
    implementation "org.jetbrains.kotlinx:kotlinx-coroutines-core:1.3.3"

    implementation "io.opencensus:opencensus-api:0.24.0"

    def junit_version = '5.6.0'
    testImplementation "org.junit.jupiter:junit-jupiter-api:$junit_version"
    testRuntimeOnly "org.junit.jupiter:junit-jupiter-engine:$junit_version"

    testImplementation "io.mockk:mockk:1.9"
}

tasks.withType(org.jetbrains.kotlin.gradle.tasks.KotlinCompile).configureEach {
    kotlinOptions {
        jvmTarget = "11"
        apiVersion = "1.3"
        languageVersion = "1.3"
    }
}

test {
    useJUnitPlatform()
}

task javadocJar(type: Jar, dependsOn: javadoc) {
    classifier = 'javadoc'
    from javadoc
}

task sourceJar(type: Jar) {
    classifier 'sources'
    from sourceSets.main.allSource
}


// Everything below is for publishing the JAR

ext.isReleaseBuild = !version.endsWith('SNAPSHOT')

artifacts {
    archives jar
    archives javadocJar
    archives sourceJar
}

signing {
    required { isReleaseBuild }
    if (isReleaseBuild && project.hasProperty('signing.keyId')) {
        useGpgCmd()
    }
    sign configurations.archives
}

publishing {
    publications {
        maven(MavenPublication) {
            customizePom(pom)

            from components.java
            artifact tasks.sourceJar
            artifact tasks.javadocJar

            if (isReleaseBuild) {
                // Create the signed pom artifact
                pom.withXml {
                    def pomFile = file("${project.buildDir}/generated-pom.xml")
                    writeTo(pomFile)
                    def pomAscFile = signing.sign(pomFile).signatureFiles[0]
                    artifact(pomAscFile) {
                        classifier = null
                        extension = 'pom.asc'
                    }
                }
            }

            // create the signed artifacts
            project.tasks.signArchives.signatureFiles.each {
                artifact(it) {
                    def matcher = it.file =~ /-(sources|javadoc)\.jar\.asc$/
                    if (matcher.find()) {
                        classifier = matcher.group(1)
                    } else {
                        classifier = null
                    }
                    extension = 'jar.asc'
                }
            }
        }
    }

    repositories {
        maven {
            name = "sonatype"

            def releasesUrl = "https://oss.sonatype.org/service/local/staging/deploy/maven2/"
            def snapshotsUrl = "https://oss.sonatype.org/content/repositories/snapshots/"
            url = isReleaseBuild ? releasesUrl : snapshotsUrl


            credentials {
                username findProperty('sonatypeUsername')
                password findProperty('sonatypePassword')
            }
        }
    }
}


def customizePom(pom) {
    pom.withXml {
        def root = asNode()

        // eliminate test-scoped dependencies (no need in maven central POMs)
        root.dependencies.removeAll { dep ->
            dep.scope == "test"
        }

        // add all items necessary for maven central publication
        root.children().last() + {
            resolveStrategy = Closure.DELEGATE_FIRST

            description 'Squash similar spans in OpenCensus'
            name 'Squashing OpenCensus Exporter'
            url 'https://github.com/spotify/squashing-census-exporter'
            licenses {
                license {
                    name 'Apache License 2.0'
                    url 'https://github.com/spotify/squashing-census-exporter/blob/master/LICENSE'
                    distribution 'repo'
                }
            }
            scm {
                url 'https://github.com/spotify/squashing-census-exporter'
                connection 'scm:git:git://github.com/spotify/squashing-census-exporter.git'
                developerConnection 'scm:git:ssh://git@github.com:spotify/squashing-census-exporter.git'
            }
            developers {
                developer {
                    id 'prism'
                    name 'prism'
                    email 'prism@spotify.com'
                }
            }
        }
    }
}


model {
    tasks.generatePomFileForMavenPublication {
        destination = file("$buildDir/generated-pom.xml")
    }
    tasks.publishMavenPublicationToMavenLocal {
        dependsOn project.tasks.signArchives
    }
    tasks.publishMavenPublicationToSonatypeRepository {
        dependsOn project.tasks.signArchives
    }
}
